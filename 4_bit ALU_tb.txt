module ALU_tb;
    reg [3:0] A;
    reg [3:0] B;
    reg [2:0] ALU_Sel;
    wire [3:0] Result;
    wire Zero;

    // Instantiate the ALU module
    ALU uut (
        .A(A),
        .B(B),
        .ALU_Sel(ALU_Sel),
        .Result(Result),
        .Zero(Zero)
    );

    // Test sequence
    initial begin
        // Test Case 1: Addition (A = 3, B = 2)
        A = 4'b0011; B = 4'b0010; ALU_Sel = 3'b000;
        #10; // Wait for 10 time units
        
        // Test Case 2: Subtraction (A = 5, B = 3)
        A = 4'b0101; B = 4'b0011; ALU_Sel = 3'b001;
        #10; // Wait for 10 time units
        
        // Test Case 3: AND (A = 6, B = 7)
        A = 4'b0110; B = 4'b0111; ALU_Sel = 3'b010;
        #10; // Wait for 10 time units
        
        // Test Case 4: OR (A = 1, B = 3)
        A = 4'b0001; B = 4'b0011; ALU_Sel = 3'b011;
        #10; // Wait for 10 time units
        
        // Test Case 5: NOT (A = 4)
        A = 4'b0100; ALU_Sel = 3'b100;
        #10; // Wait for 10 time units
        
        // Test Case 6: Zero flag check (A = 0, B = 0, Add operation)
        A = 4'b0000; B = 4'b0000; ALU_Sel = 3'b000;
        #10; // Wait for 10 time units
        
        $finish;
    end

    // Monitor the outputs
    initial begin
        $monitor("A = %b, B = %b, ALU_Sel = %b, Result = %b, Zero = %b", A, B, ALU_Sel, Result, Zero);
    end
endmodule
