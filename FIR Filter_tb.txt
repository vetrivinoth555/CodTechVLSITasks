module FIR_Filter_tb;
    
    reg clk;
    reg reset;
    reg signed [7:0] data_in;
    wire signed [15:0] data_out;
    
    // Instantiate the FIR filter
    FIR_Filter uut (
        .clk(clk),
        .reset(reset),
        .data_in(data_in),
        .data_out(data_out)
    );
    
    // Clock generation (100 MHz)
    always #5 clk = ~clk;
    
    // Test stimulus
    initial begin
        // Initialize signals
        clk = 0;
        reset = 1;
        data_in = 0;
        
        // Dump waveform
        $dumpfile("fir_filter.vcd");
        $dumpvars(0, FIR_Filter_tb);
        
        // Reset the filter
        #20;
        reset = 0;
        
        // Test case 1: Impulse response
        $display("Testing impulse response...");
        data_in = 8'd100;  // Impulse at n=0
        #10;
        data_in = 8'd0;
        #30;  // Wait for full impulse response
        
        // Test case 2: Step response
        $display("Testing step response...");
        repeat(10) begin
            data_in = 8'd50;
            #10;
        end
        data_in = 8'd0;
        #40;
        
        // Test case 3: Sinusoidal input
        $display("Testing sinusoidal input...");
        begin
            integer i;
            for (i = 0; i < 32; i = i + 1) begin
                data_in = 50 + 30 * $sin(i * 0.2); // 50 + 30*sin(0.2n)
                #10;
            end
        end
        
        // End simulation
        #100;
        $display("Simulation complete");
        $finish;
    end
    
    // Monitor the results
    always @(posedge clk) begin
        $display("Time = %0t: Input = %d, Output = %d", $time, data_in, data_out);
    end
    
endmodule