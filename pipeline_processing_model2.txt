module PipelineProcessor (
    input clk,
    input reset
);
    
    // Define opcodes
    parameter ADD  = 3'b000;
    parameter SUB  = 3'b001;
    parameter LOAD = 3'b010;
    
    // Register file (8 registers, 16-bit each)
    reg [15:0] reg_file [0:7];
    
    // Instruction memory (256 words)
    reg [15:0] instr_mem [0:255];
    
    // Data memory (256 words)
    reg [15:0] data_mem [0:255];
    
    // Pipeline registers
    reg [15:0] IF_ID_instr, IF_ID_pc;
    reg [15:0] ID_EX_pc, ID_EX_rs1, ID_EX_rs2, ID_EX_imm;
    reg [2:0] ID_EX_rd, ID_EX_rs1_addr, ID_EX_rs2_addr;
    reg [2:0] ID_EX_opcode;
    reg ID_EX_reg_write;
    reg ID_EX_mem_read;
    
    reg [15:0] EX_MEM_alu_result, EX_MEM_rs2;
    reg [2:0] EX_MEM_rd;
    reg EX_MEM_reg_write;
    reg EX_MEM_mem_read;
    
    reg [15:0] MEM_WB_data;
    reg [2:0] MEM_WB_rd;
    reg MEM_WB_reg_write;
    
    // Program counter
    reg [15:0] pc;
    
    // Control signals
    wire [2:0] opcode;
    wire [2:0] rd, rs1, rs2;
    wire [15:0] imm;
    wire reg_write, mem_read;
    
    // ALU signals
    wire [15:0] alu_in1, alu_in2, alu_result;
    
    // Forwarding signals
    wire [1:0] forwardA, forwardB;
    
    // Initialize memories and registers
    integer i;
    initial begin
        for (i = 0; i < 8; i = i + 1) begin
            reg_file[i] = 0;
        end
        for (i = 0; i < 256; i = i + 1) begin
            instr_mem[i] = 0;
            data_mem[i] = 0;
        end
        pc = 0;
    end
    
    // Instruction Fetch Stage
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            pc <= 0;
            IF_ID_instr <= 0;
            IF_ID_pc <= 0;
        end else begin
            IF_ID_instr <= instr_mem[pc];
            IF_ID_pc <= pc;
            pc <= pc + 1;
        end
    end
    
    // Instruction Decode Stage
    assign opcode = IF_ID_instr[15:13];
    assign rd = IF_ID_instr[12:10];
    assign rs1 = IF_ID_instr[9:7];
    assign rs2 = IF_ID_instr[6:4];
    assign imm = {{10{IF_ID_instr[6]}}, IF_ID_instr[6:0]}; // Sign-extended immediate
    
    // Control unit
    assign reg_write = (opcode == ADD || opcode == SUB || opcode == LOAD);
    assign mem_read = (opcode == LOAD);
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            ID_EX_pc <= 0;
            ID_EX_rs1 <= 0;
            ID_EX_rs2 <= 0;
            ID_EX_imm <= 0;
            ID_EX_rd <= 0;
            ID_EX_rs1_addr <= 0;
            ID_EX_rs2_addr <= 0;
            ID_EX_opcode <= 0;
            ID_EX_reg_write <= 0;
            ID_EX_mem_read <= 0;
        end else begin
            ID_EX_pc <= IF_ID_pc;
            ID_EX_rs1 <= reg_file[rs1];
            ID_EX_rs2 <= reg_file[rs2];
            ID_EX_imm <= imm;
            ID_EX_rd <= rd;
            ID_EX_rs1_addr <= rs1;
            ID_EX_rs2_addr <= rs2;
            ID_EX_opcode <= opcode;
            ID_EX_reg_write <= reg_write;
            ID_EX_mem_read <= mem_read;
        end
    end
    
    // Forwarding Unit
    assign forwardA = ((EX_MEM_reg_write && (EX_MEM_rd != 0) && (EX_MEM_rd == ID_EX_rs1_addr)) ? 2'b10 :
                     (MEM_WB_reg_write && (MEM_WB_rd != 0) && (MEM_WB_rd == ID_EX_rs1_addr)) ? 2'b01 : 2'b00);
    
    assign forwardB = ((EX_MEM_reg_write && (EX_MEM_rd != 0) && (EX_MEM_rd == ID_EX_rs2_addr)) ? 2'b10 :
                     (MEM_WB_reg_write && (MEM_WB_rd != 0) && (MEM_WB_rd == ID_EX_rs2_addr)) ? 2'b01 : 2'b00);
    
    // ALU input selection with forwarding
    assign alu_in1 = (forwardA == 2'b10) ? EX_MEM_alu_result :
                    (forwardA == 2'b01) ? MEM_WB_data : ID_EX_rs1;
    
    assign alu_in2 = (ID_EX_opcode == ADD || ID_EX_opcode == SUB) ? 
                    ((forwardB == 2'b10) ? EX_MEM_alu_result :
                     (forwardB == 2'b01) ? MEM_WB_data : ID_EX_rs2) : ID_EX_imm;
    
    // ALU
    assign alu_result = (ID_EX_opcode == ADD) ? alu_in1 + alu_in2 :
                       (ID_EX_opcode == SUB) ? alu_in1 - alu_in2 :
                       (ID_EX_opcode == LOAD) ? alu_in1 + alu_in2 : 0;
    
    // Execute Stage
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            EX_MEM_alu_result <= 0;
            EX_MEM_rs2 <= 0;
            EX_MEM_rd <= 0;
            EX_MEM_reg_write <= 0;
            EX_MEM_mem_read <= 0;
        end else begin
            EX_MEM_alu_result <= alu_result;
            EX_MEM_rs2 <= ID_EX_rs2;
            EX_MEM_rd <= ID_EX_rd;
            EX_MEM_reg_write <= ID_EX_reg_write;
            EX_MEM_mem_read <= ID_EX_mem_read;
        end
    end
    
    // Memory Stage
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            MEM_WB_data <= 0;
            MEM_WB_rd <= 0;
            MEM_WB_reg_write <= 0;
        end else begin
            if (EX_MEM_mem_read) begin
                MEM_WB_data <= data_mem[EX_MEM_alu_result];
            end else begin
                MEM_WB_data <= EX_MEM_alu_result;
            end
            MEM_WB_rd <= EX_MEM_rd;
            MEM_WB_reg_write <= EX_MEM_reg_write;
        end
    end
    
    // Write Back Stage
    always @(posedge clk) begin
        if (MEM_WB_reg_write && MEM_WB_rd != 0) begin
            reg_file[MEM_WB_rd] <= MEM_WB_data;
        end
    end
    
    // Simulation dump
    initial begin
        $dumpfile("pipeline.vcd");
        $dumpvars(0, PipelineProcessor);
        
        // Initialize some instructions
        // ADD R1, R2, R3
        instr_mem[0] = {ADD, 3'b001, 3'b010, 3'b011, 4'b0000};
        // SUB R4, R1, R2
        instr_mem[1] = {SUB, 3'b100, 3'b001, 3'b010, 4'b0000};
        // LOAD R5, R1, 10
        instr_mem[2] = {LOAD, 3'b101, 3'b001, 7'b0001010};
        // ADD R6, R5, R1
        instr_mem[3] = {ADD, 3'b110, 3'b101, 3'b001, 4'b0000};
        
        // Initialize some data
        reg_file[1] = 10;
        reg_file[2] = 20;
        reg_file[3] = 30;
        data_mem[20] = 100; // R1 + 10 = 10 + 10 = 20
        
        // Run simulation
        #100;
        $display("Register File Contents:");
        for (i = 0; i < 8; i = i + 1) begin
            $display("R%d = %d", i, reg_file[i]);
        end
        $finish;
    end
    
endmodule